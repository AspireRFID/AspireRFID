/*
 * Copyright 2005-2008, Aspire
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation (the "LGPL"); either version 2.1 of the 
 * License, or (at your option) any later version. If you do not alter this 
 * notice, a recipient may use your version of this file under either the 
 * LGPL version 2.1, or (at his option) any later version.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this library; if not, write to the Free Software Foundation, 
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY 
 * KIND, either express or implied. See the GNU Lesser General Public 
 * License for the specific language governing rights and limitations.
 */
package org.ow2.aspirerfid.epc.ale.api;

import java.net.URI;
import java.util.Collection;
import java.util.Set;

/**
 * A specification of an event cycle.
 * 
 * @author Guillaume Surrel
 * @version 2007
 */
public interface ECSpec {

	/**
	 * Adds one name to the list of logical reader names which will be queried
	 * as a part of this ECSpec.If the name is already present, this method has
	 * no effect.
	 * 
	 * @param name
	 *            the name of the reader
	 */
	public void addLogicalReaderName(String name);

	/**
	 * Appends a list of names to the list of logical reader names which will be
	 * queried as a part of this ECSpec. Names already in the list are ignored.
	 * 
	 * @param names
	 *            a collection of String objects containing reader names.
	 */
	public void addLogicalReaderNames(Collection names);

	/**
	 * Appends one specification to the list which describes the reports which
	 * will be generated by the event cycle for this ECSpec. If a report with
	 * this name is already present, it is replaced.
	 * 
	 * @param spec
	 *            a specification of an ECReport
	 */
	public void addReportSpec(ECReportSpec spec);

	/**
	 * Adds a list of specifications to the list which describes the reports
	 * which will be generated by the event cycle for this ECSpec. Any existing
	 * reports with the same name which are present are replaced.
	 * 
	 * @param specs
	 *            a Set of ECReportSpec objects.
	 */
	public void addReportSpecs(Set specs);

	/**
	 * Duration specifies the number of milliseconds to elapse prior to
	 * terminating the EventCycle.
	 * 
	 * @return the interval in milliseconds that will unconditionally terminate
	 *         the event cycle
	 */
	public long getDuration();

	/**
	 * If true, the corresponding ECReports instances will contain a copy of the
	 * original ECSpec that generated them.
	 * 
	 * @return true if the spec is included in reports
	 */
	public boolean getIncludeSpecInReports();

	/**
	 * Returns the list of logical reader names which will be queried as a part
	 * of this ECSpec. The order of the reader names is the order they were
	 * first added to the ECSpec.
	 * 
	 * @return a Set of String objects containing reader names.
	 */
	public Set getLogicalReaderNames();

	/**
	 * Gets the period in milliseconds from the beginning of one event cycle to
	 * the next.
	 * 
	 * @return the repeat period
	 */
	public long getRepeatPeriod();

	/**
	 * Gets the specification which describe the report which will be generated
	 * with the given name by the event cycle for this ECSpec.
	 * 
	 * @param name
	 *            the name of the ECSpec
	 * @return null if there is no specification with the specified name.
	 */
	public ECReportSpec getReportSpec(String name);

	/**
	 * @return all the ECSpec which describe the reports which will be generated
	 *         by the event cycle.
	 */
	public Set getReportSpecs();

	/**
	 * @return the "stable field interval" in milliseconds for this event cycle.
	 */
	public long getStableSetInterval();

	/**
	 * Gets the start trigger which will begin an event cycle.
	 * 
	 * @return The URI for the trigger
	 */
	public URI getStartTrigger();

	/**
	 * Gets the stop trigger which will end an event cycle.
	 * 
	 * @return The URI for the trigger
	 */
	public URI getStopTrigger();

	/**
	 * DurationMillis specifies the number of milliseconds to elapse prior to
	 * terminating the EventCycle.
	 * 
	 * @param interval
	 *            the interval in MilliSeconds that will unconditionally
	 *            terminate the event cycle.
	 */
	public void setDuration(long interval);

	/**
	 * If true, the corresponding ECReports instances will contain a copy of the
	 * original ECSpec that generated them.
	 * 
	 * @param includeSpec
	 *            true to include the ECSpec in the generated reports
	 */
	public void setIncludeSpecInReports(boolean includeSpec);

	/**
	 * Sets the list of logical reader names which will be queried as a part of
	 * this ECSpec. Any previous list is replaced.
	 * 
	 * @param names
	 *            a Set of String objects containing reader names.
	 */
	public void setLogicalReaderNames(Set names);

	/**
	 * Sets the period in milliseconds from the beginning of one event cycle to
	 * the next.
	 * 
	 * @param interval
	 *            the period in milliseconds
	 */
	public void setRepeatPeriod(long interval);

	/**
	 * Sets the list of specifications which describe the reports which will be
	 * generated by the event cycle for this ECSpec. Any previous list is
	 * replaced.
	 * 
	 * @param specs
	 *            a Set of ECReportSpec objects.
	 */
	public void setReportSpecs(Set specs);

	/**
	 * Sets the start trigger which will begin an event cycle.
	 * 
	 * @param trigger
	 *            The URI for the trigger
	 */
	public void setStartTrigger(URI trigger);

	/**
	 * Sets the stop trigger which will end an event cycle.
	 * 
	 * @param trigger
	 *            The URI for the trigger
	 */
	public void setStopTrigger(URI trigger);

	/**
	 * Sets the "stable field interval" in milliseconds for this event cycle. If
	 * non-zero, the event cycle will terminate if no new tags are seen for this
	 * interval of time.
	 * 
	 * @param stableSetInterval
	 *            the "stable field interval" in milliseconds
	 */
	public void setStableSetInterval(long stableSetInterval);

	/**
	 * Get the event topic name on which the rfid readers publish detected tags
	 * 
	 * @return The event topic name
	 */
	public String getEventTopic();

	/**
	 * Set the event topic name on which the rfid readers publish detected tags
	 * 
	 * @param eventTopic
	 *            The event topic name
	 */
	public void setEventTopic(String eventTopic);

	/**
	 * @return null if the ECSpec is valid, a string describing the problem
	 *         otherwise
	 */
	public String getValidationMessage();

	/**
	 * Returns the gateway name for the read tags.
	 * 
	 * @return The gateway name for the read tags.
	 */
	public String getGatewayName();

	/**
	 * Sets the gateway name for the read tags.
	 * 
	 * @param gatewayName
	 *            The gateway name for the read tags.
	 */
	public void setGatewayName(String gatewayName);

}
