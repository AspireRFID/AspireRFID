/*
 * Copyright 2005-2008, Aspire
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation (the "LGPL"); either version 2.1 of the 
 * License, or (at your option) any later version. If you do not alter this 
 * notice, a recipient may use your version of this file under either the 
 * LGPL version 2.1, or (at his option) any later version.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this library; if not, write to the Free Software Foundation, 
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY 
 * KIND, either express or implied. See the GNU Lesser General Public 
 * License for the specific language governing rights and limitations.
 */
package org.ow2.aspirerfid.epc.ale.api;

import java.util.List;

/**
 * This interface must be implemented by the objects which describe the
 * individual reports which will be generated by an event cycle.
 * 
 * @author Guillaume Surrel
 * @version 2007
 */
public interface ECReportSpec {

	/**
	 * Appends the specified URI to the list of EPC patterns which will be
	 * excluded in the report.
	 * 
	 * @param name
	 *            an EPC pattern
	 */
	public void addExcludePattern(String name);

	/**
	 * Appends a list of URIs to the list of EPC patterns which will be excluded
	 * in the report.
	 * 
	 * @param names
	 *            a list of String containing EPC patterns
	 */
	public void addExcludePatterns(List names);

	/**
	 * Appends the specified URI to the list of EPC patterns which will be
	 * included in the report.
	 * 
	 * @param name
	 *            an EPC pattern
	 */
	public void addIncludePattern(String name);

	/**
	 * Appends a list of URIs to the list of EPC patterns which will be included
	 * in the report.
	 * 
	 * @param names
	 *            a list of String containing EPC patterns.
	 */
	public void addIncludePatterns(List names);

	/**
	 * Appends the specified URI to the list of EPC patterns which will control
	 * grouping.
	 * 
	 * @param group
	 *            an EPC grouping pattern
	 */
	public void addGroupSpec(String group);

	/**
	 * Gets the list of EPC patterns which will be excluded in the report.
	 * 
	 * @return a list of String containing EPC patterns.
	 */
	public List getExcludePatterns();

	/**
	 * Returns the list of patterns that control grouping of EPCs.
	 * 
	 * @return list of group specs
	 */
	public List getGroupSpec();

	/**
	 * If includeCount is true, each generated ECReportGroup instance will
	 * contain an EPC count.
	 * 
	 * @return true if include count is set
	 */
	public boolean getIncludeCount();

	/**
	 * If includeEPC is true, the generated ECReportGroupListMember instances
	 * will include EPCs in Pure Identity format.
	 * 
	 * @return true if include EPC is set
	 */
	public boolean getIncludeEPC();

	/**
	 * Gets the list of EPC patterns which will be included in the report. Refer
	 * to the "ConnecTerra RFTagAware Programmer Guide" for information about
	 * EPC patterns.
	 * 
	 * @return a list of URI objects containing EPC patterns.
	 */
	public List getIncludePatterns();

	/**
	 * If includeRawDecimal is true, the generated ECReportGroupListMember
	 * instances will include EPCs in raw decimal format.
	 * 
	 * @return true if includeRawDecimal is set
	 */
	public boolean getIncludeRawDecimal();

	/**
	 * If includeRawHex is true, the generated ECReportGroupListMember instances
	 * will include EPCs in Raw Hexadecimal format.
	 * 
	 * @return true if includeRawHex is set
	 */
	public boolean getIncludeRawHex();

	/**
	 * If includeTag is true, the generated ECReportGroupListMember instances
	 * will include EPCs in Tag format.
	 * 
	 * @return true if includeTag is set
	 */
	public boolean getIncludeTag();

	/**
	 * @return the name of the report
	 */
	public String getName();

	/**
	 * @return true if the report should be generated even if it contains no
	 *         EPCs, and false otherwise.
	 */
	public boolean getReportIfEmpty();

	/**
	 * @return the set of EPCs which determine the report contents (current,
	 *         additions, or deletions).
	 * @see ECReportSetSpec
	 */
	public String getReportSetSpec();

	/**
	 * If reportOnlyOnChange is true, the ECReport is generated only if the set
	 * of EPCs, is different from the previous event cycle's set.
	 * 
	 * @return true if reportOnlyOnChange is set
	 */
	public boolean reportOnlyOnChange();

	/**
	 * Sets the list of EPC patterns which will be excluded in the report. Any
	 * previous list is replaced.
	 * 
	 * @param names
	 *            a list of URI objects containing EPC patterns.
	 */
	public void setExcludePatterns(List names);

	/**
	 * Sets the list of EPC patterns which control grouping in the report. Any
	 * previous list is replaced.
	 * 
	 * @param listOfGroupSpecs
	 *            a list of URI objects containing EPC patterns.
	 */
	public void setGroupSpec(List listOfGroupSpecs);

	/**
	 * If includeCount is true, each generated ECReportGroup instance will
	 * contain an EPC count.
	 * 
	 * @param includeCount
	 *            true to include count
	 */
	public void setIncludeCount(boolean includeCount);

	/**
	 * If includeEPC is true, the generated ECReportGroupListMember instances
	 * will include EPCs in Pure Identity format.
	 * 
	 * @param includeEPC
	 *            true to include EPC
	 */
	public void setIncludeEPC(boolean includeEPC);

	/**
	 * Sets the list of EPC patterns which will be included in the report. Any
	 * previous list is replaced.
	 * 
	 * @param names
	 *            a List of URI objects containing EPC patterns.
	 */
	public void setIncludePatterns(List names);

	/**
	 * If includeRawDecimal is true, the generated ECReportGroupListMember
	 * instances will include EPCs in raw decimal format.
	 * 
	 * @param includeRawDecimal
	 *            true include RawDecimal format
	 */
	public void setIncludeRawDecimal(boolean includeRawDecimal);

	/**
	 * If includeRawHex is true, the generated ECReportGroupListMember instances
	 * will include EPCs in Raw Hexadecimal format.
	 * 
	 * @param includeRawHex
	 *            true to include RawHex format
	 */
	public void setIncludeRawHex(boolean includeRawHex);

	/**
	 * If includeTag is true, the generated ECReportGroupListMember instances
	 * will include EPCs in Tag format.
	 * 
	 * @param includeTag
	 *            true to include Tag format
	 */
	public void setIncludeTag(boolean includeTag);

	/**
	 * @param name
	 *            the name of the report.
	 */
	public void setName(String name);

	/**
	 * If set to true, the report should be generated even if it contains no
	 * EPCs.
	 * 
	 * @param value
	 *            true to allow sending empty reports
	 */
	public void setReportIfEmpty(boolean value);

	/**
	 * If reportOnlyOnChange is true, the ECReport is generated only if the set
	 * of EPCs is different from the previous event cycle's set.
	 * 
	 * @param reportOnlyOnChange
	 *            true to report only on change
	 */
	public void setReportOnlyOnChange(boolean reportOnlyOnChange);

	/**
	 * Sets the set of EPCs which determine the report contents (current,
	 * additions, or deletions). CURRENT is selected by default.
	 * 
	 * @param rSetSpec
	 *            ECReportSetSpec.ADDITIONS or ECReportSetSpec.DELETIONS or
	 *            ECReportSetSpec.CURRENT
	 */
	public void setReportSetSpec(String rSetSpec);

	/**
	 * If includeGPS is true, the generated ECReportGroupListMember instances
	 * will include GPS data
	 * 
	 * @param includeGPS
	 *            true to include GPS data
	 */
	public void setIncludeGPS(boolean includeGPS);

	/**
	 * If includeTemp is true, the generated ECReportGroupListMember instances
	 * will include temperature data
	 * 
	 * @param includeTemp
	 *            true to include temperature data
	 */
	public void setIncludeMeasurement(boolean includeTemp);

	/**
	 * If includeGPS is true, the generated ECReportGroupListMember instances
	 * will include GPS data
	 * 
	 * @return true if includeGPS is set
	 */
	public boolean getIncludeGPS();

	/**
	 * If includeMeasurement is true, the generated ECReportGroupListMember
	 * instances will include measurement data
	 * 
	 * @return true if includeMeasurement is set
	 */
	public boolean getIncludeMeasurement();

	/**
	 * If includeReaderName is true, the generated ECReportGroupListMember
	 * instances will include the name of the logical reader which read the tag
	 * 
	 * @param includeReaderName
	 *            true to include the reader name
	 */
	public void setIncludeReaderName(boolean includeReaderName);

	/**
	 * If includeReaderName is true, the generated ECReportGroupListMember
	 * instances will include the name of the logical reader which read the tag
	 * 
	 * @return true if includeReaderName is set
	 */
	public boolean getIncludeReaderName();
}
